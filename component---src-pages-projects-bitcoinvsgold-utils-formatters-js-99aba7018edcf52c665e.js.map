{"version":3,"sources":["webpack:///./src/pages/projects/bitcoinvsgold/utils/formatters.js","webpack:///./node_modules/core-js/modules/_flags.js","webpack:///./node_modules/core-js/modules/_string-trim.js","webpack:///./node_modules/core-js/modules/es6.regexp.to-string.js","webpack:///./node_modules/core-js/modules/es6.number.constructor.js","webpack:///./node_modules/core-js/modules/_inherit-if-required.js","webpack:///./node_modules/core-js/modules/_set-proto.js","webpack:///./node_modules/core-js/modules/_string-ws.js","webpack:///./node_modules/core-js/modules/es6.regexp.flags.js"],"names":["commarize","num","unit","Math","floor","toFixed","length","Number","formatNum","symbol","numFormatted","toString","replace","measure","anObject","__webpack_require__","module","exports","that","this","result","global","ignoreCase","multiline","unicode","sticky","$export","defined","fails","spaces","space","ltrim","RegExp","rtrim","exporter","KEY","exec","ALIAS","exp","FORCE","fn","trim","P","F","string","TYPE","String","$flags","DESCRIPTORS","$toString","define","prototype","call","source","flags","R","concat","name","has","cof","inheritIfRequired","toPrimitive","gOPN","f","gOPD","dP","$trim","$Number","Base","proto","BROKEN_COF","TRIM","toNumber","argument","it","third","radix","maxCode","first","charCodeAt","NaN","code","digits","slice","i","l","parseInt","value","arguments","valueOf","key","keys","split","j","constructor","isObject","setPrototypeOf","set","target","C","S","check","O","TypeError","Object","test","buggy","Function","Array","e","__proto__","300","t","r","n","configurable","get"],"mappings":"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","file":"component---src-pages-projects-bitcoinvsgold-utils-formatters-js-99aba7018edcf52c665e.js","sourcesContent":["\nexport const commarize = (num) => {\n  // Alter numbers larger than 1k\n  if (num >= 1e3) {\n    var units = [\"k\", \"M\", \"Billion\", \"Trillion\"];\n    \n    // Divide to get SI Unit engineering style numbers (1e3,1e6,1e9, etc)\n    let unit = Math.floor(((num).toFixed(0).length - 1) / 3) * 3;\n    // Calculate the remainder\n    const formattedNum = ( num / (Number('1e'+unit))).toFixed(1);\n    var unitname = units[Math.floor(unit / 3) - 1]\n    \n    // output number remainder + unitname\n    return formattedNum + ' ' + unitname;\n  }\n  \n  // return formatted original number\n  return num.toFixed(2);\n};\n\nexport const formatNum = (symbol, num) => {\n  let numFormatted = num.toFixed(2).toString().replace(/(\\d)(?=(\\d{3})+(?:\\.\\d+)?$)/g, \"$1,\");\n  if (symbol.measure) {\n    numFormatted += symbol.measure;\n  }\n  // this magic incantation adds commas in the thousands place\n  return numFormatted\n};\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n"],"sourceRoot":""}