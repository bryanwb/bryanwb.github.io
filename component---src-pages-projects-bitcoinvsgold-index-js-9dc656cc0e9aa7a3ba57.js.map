{"version":3,"sources":["webpack:///./src/pages/projects/bitcoinvsgold/registerServiceWorker.js","webpack:///./src/pages/projects/bitcoinvsgold/index.js","webpack:///./node_modules/whatwg-fetch/fetch.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","navigator","URL","Object","NODE_ENV","PUBLIC_DIR","BUILD_STAGE","PUBLIC_URL","origin","addEventListener","swUrl","fetch","then","response","status","headers","get","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","react_dom__WEBPACK_IMPORTED_MODULE_1___default","a","render","react__WEBPACK_IMPORTED_MODULE_0___default","createElement","_App__WEBPACK_IMPORTED_MODULE_3__","default","document","getElementById","_registerServiceWorker__WEBPACK_IMPORTED_MODULE_5__","self","support","searchParams","iterable","Symbol","blob","Blob","e","formData","arrayBuffer","viewClasses","isDataView","obj","DataView","prototype","isPrototypeOf","isArrayBufferView","ArrayBuffer","isView","toString","call","Headers","append","name","value","normalizeName","normalizeValue","oldValue","this","map","delete","has","hasOwnProperty","set","forEach","callback","thisArg","keys","items","push","iteratorFor","values","entries","iterator","methods","Request","clone","body","_bodyInit","Body","Response","statusText","url","type","redirectStatuses","redirect","RangeError","input","init","Promise","resolve","reject","request","xhr","XMLHttpRequest","onload","rawHeaders","options","getAllResponseHeaders","replace","split","line","parts","key","shift","trim","join","responseURL","responseText","onerror","TypeError","ontimeout","open","method","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","String","test","toLowerCase","next","done","Array","isArray","header","getOwnPropertyNames","consumed","bodyUsed","fileReaderReady","reader","result","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","bufferClone","buf","slice","view","Uint8Array","byteLength","buffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","Error","rejected","text","readAsText","chars","length","i","fromCharCode","decode","json","JSON","parse","upcased","mode","toUpperCase","referrer","form","bytes","decodeURIComponent","bodyInit","ok"],"mappings":"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","file":"component---src-pages-projects-bitcoinvsgold-index-js-9dc656cc0e9aa7a3ba57.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'whatwg-fetch';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n"],"sourceRoot":""}